/* ======
   SYSTEM
   ====== */

class Soulful : EventHandler {
	static const string floorTex[] =  {
		"GRASS1", "OGRSSA01",
		"GRASS2", "SLIME13", "OGRSSB01", "OGRSSD01", "OGRSSD02"
		"RROCK19", "RROCK20", "OGRSSC01", "OGRSSC02", "OGRSSE01"
	};
	static const int floorFX[] = {
		0, 0, //Grass
		1, 1, 1, 1, 1, //Variant grass
		2, 2, 2, 2, 2 //Tall grass
	};
	
	/* =====
	   ACTOR
	   ===== */
	
	// Replace actors
	override void CheckReplacement(ReplaceEvent e) {
		bool randomizeDecorations = CVar.FindCVar("cl_sf_randomizeDecorations").GetBool();
		
		switch (e.replacee.GetClassName()) {
			// Monsters
			case 'ChaingunGuy':
				if (sv_sf_r_heavyWeaponDude) {
					e.replacement = "SF_ChaingunGuySpawner";
				}
			break;
			
			case 'DoomImp':
				if (sv_sf_r_imp) {
					e.replacement = "SF_ImpSpawner";
				}
			break;
			
			case 'Demon':
				if (sv_sf_r_demon) {
					e.replacement = "SF_DemonSpawner";
				}
			break;
			
			case 'Spectre':
				if (sv_sf_r_spectre) {
					e.replacement = "SF_Spectre";
				}
			break;
			
			case 'Cacodemon':
				if (sv_sf_r_cacodemon) {
					e.replacement = "SF_CacodemonSpawner";
				}
			break;
			
			case 'WolfensteinSS':
				if (sv_sf_r_ss) {
					e.replacement = "SF_NaziSpawner";
				}
			break;
			
			// Objects
			case 'ExplosiveBarrel':
				if (sv_sf_randomizeBarrels) {
					e.replacement = "SF_BarrelSpawner";
				}
			break;
			
			case 'TorchTree':
				if (randomizeDecorations) {
					e.replacement = "SF_TorchTree";
				}
			break;
			
			case 'BigTree':
				if (randomizeDecorations) {
					e.replacement = "SF_BigTree";
				}
			break;
			
			case 'Stalagtite':
				if (randomizeDecorations) {
					e.replacement = "SF_Stalagtite";
				}
			break;
			
			case 'BurningBarrel':
				if (randomizeDecorations) {
					e.replacement = "SF_BurningBarrel";
				}
			break;
			
			case 'HealthBonus':
				if (sv_sf_randomizeItems) {
					e.replacement = "SF_HealthBonusSpawner";
				}
			break;
			
			case 'ArmorBonus':
				if (sv_sf_randomizeItems) {
					e.replacement = "SF_ArmorBonusSpawner";
				}
			break;
			
			case 'Berserk':
				if (sv_sf_randomizeItems) {
					e.replacement = "SF_BerserkSpawner";
				}
			break;
		}
	}
	
	override void CheckReplacee(ReplacedEvent e) {
		switch (e.replacement.GetClassName()) {
			// Monsters
			case 'SF_ChaingunGuySpawner':
			case 'SF_ChaingunGuy': 
			case 'SF_HellifiedSoldier':
				e.replacee = "ChaingunGuy";
			break;
			
			case 'SF_ImpSpawner':
			case 'SF_Imp':
			case 'SF_Baronet':
				e.replacee = "DoomImp";
			break;
			
			case 'SF_DemonSpawner':
			case 'SF_Demon':
			case 'SF_Butcher':
			case 'SF_Taurus':
				e.replacee = "Demon";
			break;
			
			case 'SF_Spectre':
				e.replacee = "Spectre";
			break;
			
			case 'SF_CacodemonSpawner':
			case 'SF_Cacodemon':
			case 'SF_Watcher':
				e.replacee = "Cacodemon";
			break;
			
			case 'SF_NaziSpawner':
			case 'SF_SSNazi':
			case 'SF_SniperNazi':
				e.replacee = "WolfensteinSS";
			break;
			
			// Objects
			case 'SF_BarrelSpawner':
			case 'SF_Barrel':
			case 'SF_FireBarrel':
			case 'SF_EmptyBarrel':
				e.replacee = "ExplosiveBarrel";
			break;
			
			case 'SF_TorchTree':
				e.replacee = "TorchTree";
			break;
			
			case 'SF_BigTree':
				e.replacee = "BigTree";
			break;
			
			case 'SF_Stalagtite':
				e.replacee = "Stalagtite";
			break;
			
			case 'SF_BurningBarrel':
				e.replacee = "BurningBarrel";
			break;
			
			case 'SF_HealthBonusSpawner':
			case 'SF_HealthBonus':
			case 'SF_SuperHealthBonus':
				e.replacee = "HealthBonus";
			break;
			
			case 'SF_ArmorBonusSpawner':
			case 'SF_ArmorBonus':
			case 'SF_SuperArmorBonus':
				e.replacee = "ArmorBonus";
			break;
			
			case 'SF_BerserkSpawner':
			case 'SF_QuadDamageSphere':
			case 'SF_AndrenalinePack':
				e.replacee = "Berserk";
			break;
		}
	}
	
	static void RadiusDamage(Actor actor, double attackDist, int dmg, string dmgType) {
        BlockThingsIterator it = BlockThingsIterator.Create(actor, attackDist);
		
        while (it.next()) {
			let next = it.thing;
			if (next == actor || next.bKilled || next.bNoRadiusDmg || (infighting < 1 && 
				(actor is "SF_Watcher" || actor is "SF_WatcherGas") && next is "Cacodemon")) {
				continue;
			}

			double dist = actor.Distance3D(next);
			
			if (dist > attackDist || !actor.CheckSight(next, SF_IgnoreWaterBoundary)) {
				continue;
			}
			
            next.DamageMObj(actor, actor.target, dmg, dmgType, flags: DMG_Thrustless);
        }
	}
	
	/* ======
	   DETAIL
	   ====== */
	
	// Automatically detail map
	override void WorldLoaded(WorldEvent e) {
		/* High detail mode (will spawn decorations everywhere, slower)
		   Code from FancyWorld by Kinsie */
		if (sv_sf_spawnDetails == 2 || sv_sf_spawnDetails == 3) {
			int scanX = -32448;
			int scanY = 32448;
			int scanZ = 0;
			
			Vector3 scan3 = (scanX, scanY, scanZ);
			
			while (scanY > -32448) {
				while (scanX < 32448) {
					Vector2 scanPos = (scanX, scanY);
					
					scanZ = Level.PointInSector(scanPos).floorPlane.ZAtPoint(scanPos);
					
					if (Level.IsPointInLevel(scan3)) {
						Array<string> getFloorTex;
						
						getFloorTex.Push(TexMan.GetName(Level.PointInSector(scanPos).GetTexture(Sector.floor)));
						SpawnDetail(getFloorTex, scan3 + (FRandom(-32, 32), FRandom(-32, 32), 0));
					}
					
					scanX += 64;
					scan3 = (scanX, scanY, scanZ);
				}
				
				scanX = -32448;
				scanY -= 64;
			}
		}
	}
	
	//Marine bush easter egg
	override void WorldThingSpawned(WorldEvent e) {
		let obj = e.thing;
		
		if (obj && obj is "Chainsaw" && Soulful.IsOnGrass(obj, false) && Random(0, 100) == 0) {
			double angle = FRandom(0, 360);
			
			Actor.Spawn("SF_MarineBush", obj.pos + (cos(angle) * 64, sin(angle) * 64, 0));
		}
	}
	
	static void SpawnDetail(Array<string> checkTexture, Vector3 pos) {
		for (int i = 0; i < checkTexture.Size(); i++) {
			for (int j = 0; j < Soulful.floorTex.Size(); j++) {
				if (checkTexture[i] == Soulful.floorTex[j] && Random(0, 2) == 1) {
					string getActor;
					
					switch (Soulful.floorFX[j]) {
						case 0:
							getActor = "SF_Grass";
						break;
						
						case 1:
							getActor = (Random(0, 1) == 1) ? "SF_TallGrass" : "SF_Grass";
						break;
						
						case 2:
							getActor = "SF_TallGrass";
						break;
					}
					
					Actor.Spawn(getActor, pos);
					
					return;
				}
			}
		}
	}
	
	static bool IsOnGrass(Actor actor, bool canBeRocky = true) {
		let mySector = actor.curSector;
		
		if (mySector) {
			string getFloorTex = TexMan.GetName(mySector.GetTexture(Sector.floor));
			int i;
			
			if (canBeRocky) {
				string grassTextures[] = {
					"GRASS1",
					"OGRSSA01",
					"GRASS2",
					"SLIME13",
					"OGRSSB01",
					"OGRSSD01",
					"OGRSSD02",
					"RROCK19",
					"RROCK20",
					"OGRSSC01",
					"OGRSSC02",
					"OGRSSE01"
				};
				
				for (i = 0; i < grassTextures.Size(); i++) {
					if (grassTextures[i] == getFloorTex) {
						return true;
					}
				}
			} else {
				string grassTextures[] = {
					"GRASS1",
					"OGRSSA01",
					"GRASS2",
					"OGRSSB01",
					"OGRSSD01",
					"OGRSSD02",
					"OGRSSC01",
					"OGRSSC02",
					"OGRSSE01"
				};
				
				for (i = 0; i < grassTextures.Size(); i++) {
					if (grassTextures[i] == getFloorTex) {
						return true;
					}
				}
			}
		}
		
		return false;
	}
	
	static bool IsOnMud(Actor actor) {
		let mySector = actor.curSector;
		
		if (mySector) {
			string getFloorTex = TexMan.GetName(mySector.GetTexture(Sector.floor));
			string mudTextures[] = {
				"FLAT10",
				"MFLR8_2",
				"RROCK19",
				"SLIME01",
				"SLIME02",
				"SLIME03",
				"SLIME04",
				"SLIME05",
				"SLIME06",
				"SLIME07",
				"SLIME08"
			};
			
			for (int i = 0; i < mudTextures.Size(); i++) {
				if (mudTextures[i] == getFloorTex) {
					return true;
				}
			}
		}
		
		return false;
	}
	
	static void SpawnGrass(Actor actor) {
		// Low detail mode (spawn details only around decorations, faster)
		Sector mySector = actor.curSector;
		
		if ((sv_sf_spawnDetails == 1 || sv_sf_spawnDetails == 3) && mySector) {
			Array<string> grassTextures;
			
			grassTextures.Push("GRASS1");
			grassTextures.Push("GRASS2");
			grassTextures.Push("SLIME13");
			grassTextures.Push("RROCK19");
			grassTextures.Push("RROCK20");
			
			string getFloorTex = TexMan.GetName(mySector.GetTexture(Sector.floor));
			
			for (int i = 0; i < grassTextures.Size(); i++) {
				if (grassTextures[i] == getFloorTex) {
					for (int j = 0; j < Random(0, 10); j++) {
						double dir = FRandom(0, 360);
						double range = actor.radius + FRandom(-32, 32);
						
						Soulful.SpawnDetail(grassTextures, actor.pos + (cos(dir) * range, sin(dir) * range, 0));
					}
					
					return;
				}
			}
		}
	}
}

/* ======
   ACTORS
   ====== */

// Spawner Base
class SF_Spawner : Actor {
	action void A_Spawner(class<Actor> spawn) {
		A_SpawnItemEx(spawn, flags: SXF_TransferTranslation | SXF_NoCheckPosition | SXF_TransferAmbushFlag | SXF_TransferPointers | SXF_TransferSpecial);
	}
}

/* ========
   POWERUPS
   ======== */

class SF_PowerQuadDamage : PowerDamage {
	Default {
		PowerUp.Duration -60;
		PowerUp.Color "RedMap";
		Inventory.Icon "SQDSA0";
		DamageFactor "Normal", 4;
	}
}

class SF_PowerAndrenaline : PowerDoubleFiringSpeed {
	Default {
		PowerUp.Duration -60;
		PowerUp.Color "FF 00 00", 0.25;
		Inventory.Icon "SARKA0";
	}
}

class SF_PowerAndrenaline2 : PowerProtection {
	Default {
		PowerUp.Duration -60;
		DamageFactor "Normal", 0.5;
	}
}