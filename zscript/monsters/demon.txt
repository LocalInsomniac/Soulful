// Demon Spawner
class SF_DemonSpawner : SF_Spawner {
	override void SetSpawn() {
		class<Actor> spawn = (Soulful.IsOnMud(self) && Random(0, 3) == 0) ? 'SF_Butcher' : (Random(0, 3) == 0 ? 'SF_Taurus' : 'SF_Demon');
	}
}

// Demon
class SF_Demon : Demon {
	States {
		Spawn:
			SSAR AB 10 A_Look;
			Loop;

		See:
			SSAR AABBCCDD 2 Fast A_Chase;
			Loop;

		Melee:
			SSAR EF 8 Fast A_FaceTarget;
			SSAR G 8 Fast A_SargAttack;
			Goto See;

		Pain:
			SSAR H 2 Fast;
			SSAR H 2 Fast A_Pain;
			Goto See;

		Death:
			SSAR I 7;
			SSAR J 7 A_Scream;
			SSAR K 5;
			SSAR L 5 A_NoBlocking;
			SSAR M 4;
			SSAR N -1;
			Stop;

		Raise:
			SSAR NMLKJI 5;
			Goto See;
	}
}

// Butcher
class SF_Butcher : Demon {
	Default {
		Speed 12;
		MaxTargetRange 260;
		MeleeRange 48;
		SeeSound "SF_Butcher/sight";
		AttackSound "SF_Butcher/melee";
		PainSound "SF_Butcher/pain";
		DeathSound "SF_Butcher/death";
		ActiveSound "SF_Butcher/active";
		Obituary "%o was mauled by a Butcher.";
		Tag "Butcher";
	}
	
	States {
		Spawn:
			SBUT AB 10 A_Look;
			Loop;

		See:
			SBUT AABBCCDD 2 Fast A_Chase;
			Loop;

		Missile:
			SBUT E 5 Fast A_FaceTarget;
			SBUT F 14 {
				painChance = 0;
				bDropOff = true;
				A_FaceTarget();
				A_ChangeVelocity(16, 0, 6, CVF_Relative | CVF_Replace);
				A_StartSound("SF_Butcher/attack");
			}
			SBUT G 8 Fast A_SargAttack;
			SBUT G 1 A_JumpIf((pos.z == floorZ || bOnMObj), 1);
			Wait;
			SBUT G 0 A_ButcherReset;
			Goto See;
			
		Melee:
			SBUT EF 7 Fast A_FaceTarget;
			SBUT G 7 Fast A_SargAttack;
			Goto See;

		Pain:
			SBUT H 2 Fast;
			SBUT H 2 Fast A_Pain;
			Goto See;

		Death:
			SBUT I 7 A_ButcherReset;
			SBUT J 7 A_Scream;
			SBUT K 5;
			SBUT L 5 A_NoBlocking;
			SBUT M 4;
			SBUT N -1;
			Stop;

		Raise:
			SBUT NMLKJI 5;
			Goto See;
	}
	
	action void A_ButcherReset() {
		painChance = default.painChance;
		bDropOff = default.bDropOff;
	}
}

//Taurus
class SF_Taurus : Demon {
	Default {
		Health 200;
		PainChance 90;
		Speed 8;
		SeeSound "SF_Taurus/sight";
		AttackSound "SF_Taurus/melee";
		PainSound "SF_Taurus/pain";
		DeathSound "SF_Taurus/death";
		ActiveSound "SF_Taurus/active";
		Obituary "%o was rammed by a Taurus.";
		Tag "Taurus";
	}
	
	States {
		Spawn:
			STAU AB 10 A_Look;
			Loop;

		See:
			STAU A 0 Fast A_TaurusReset;
			STAU AABBCCDD 2 Fast A_Chase;
			Goto See + 1;
		
		Missile:
			STAU E 8 Fast {
				painChance *= 0.5;
				A_FaceTarget();
			}
			STAU A 1 Fast A_TaurusCharge(true);
			Goto Missile + 2;
			STAU AAABBBCCCDDD 1 Fast A_TaurusCharge;
			Goto Missile + 3;
			
		Ram:
			STAU E 1 Fast {
				painChance = 0;
				A_Recoil(-16);
				
				if (sv_sf_demoknight) {
					bool hitFlesh = false;
					double range = 80;
					
					if (target) {
						range += target.vel.xy.Length();
					}
					
					BlockThingsIterator it = BlockThingsIterator.Create(self, range);
					
					while (it.next()) {
						let next = it.thing;
						
						if (next == self || next.bKilled || !next.bSolid || !next.bShootable || next.bNoBlood || (infighting < 1 && next is "Demon")) {
							continue;
						}

						double dist = Distance3D(next);
						
						if (dist > range || !CheckSight(next, SF_IgnoreWaterBoundary)) {
							continue;
						}
						
						hitFlesh = true;
					}
					
					A_StartSound(hitFlesh ? "SF_Taurus/ramflesh" : "SF_Taurus/ramworld", Chan_Body);
				}
				else {
					A_StartSound("SF_Taurus/ram", Chan_Body);
				}
			}
			
			STAU E 4 Fast A_TaurusPush;
			STAU G 5 Fast;
			STAU G 0 Fast A_TaurusReset;
			Goto See;
		
		Melee:
			STAU EF 8 Fast A_FaceTarget;
			STAU G 8 Fast A_SargAttack;
			Goto See;

		Pain:
			STAU H 2 Fast A_TaurusReset;
			STAU H 2 Fast A_Pain;
			Goto See;

		Death:
			STAU I 7 A_TaurusReset;
			STAU J 7 A_Scream;
			STAU K 5;
			STAU L 5 A_NoBlocking;
			STAU M 4;
			STAU N -1;
			Stop;

		Raise:
			STAU NMLKJI 5;
			Goto See;
	}
	
	action void A_TaurusCharge(bool start = false) {
		A_FaceTarget(3);
		
		if (start) {
			A_StartSound(sv_sf_demoknight ? "SF_Taurus/demo" : "SF_Taurus/attack");
		} else {
			if (vel.xy.Length() == 0) {
				SetStateLabel("Ram");
				return;
			}
		}
		
		A_ChangeVelocity(12, 0, vel.z, CVF_Relative | CVF_Replace);
	}
	
	action void A_TaurusPush() {
		double range = 80;
		
		if (target) {
			range += target.vel.xy.Length();
		}
		
		BlockThingsIterator it = BlockThingsIterator.Create(self, range);
		
        while (it.next()) {
			let next = it.thing;
			
			if (next == self || next.bBoss || next.bKilled || !next.bSolid || !next.bShootable || (infighting < 1 && next is "Demon")) {
				continue;
			}

			double dist = Distance3D(next);
			
			if (dist > range || !CheckSight(next, SF_IgnoreWaterBoundary)) {
				continue;
			}
			
            next.DamageMObj(self, target, Random(1, 10) * 4, "None", flags: DMG_Thrustless);
			
			double dir = atan2(next.pos.y - pos.y, next.pos.x - pos.x);
			
			next.A_ChangeVelocity(cos(dir) * 8, sin(dir) * 8, next.vel.z + 10);
        }
	}
	
	action void A_TaurusReset() {
		painChance = default.painChance;
	}
}